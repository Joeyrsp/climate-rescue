:: System initiation, playthrough & autosave reloads {"position":"1375,21050"}
<<fav>>
----
!!System initiation & the playthrough & autosave reloads
The adviser is being designed to run in continuous session (with state autosave and auto reload running) AND the adviser is also being updated  in functionality and content very frequently - so the continuous user session overlaps the adviser development upgrades.

This all being the case then any developer changes made to the StoryInit passage or to passages tagged with init, after the user starts using the adviser, will be bypassed.

If we rely on session variables and don't use the metadata or remember caches, then we mustn't use restart to reinitiate the project (else the user's work will be lost), so we have to find a way to trigger the re-running of initiation code when a new version of the adviser is loaded.  This can be done by This can be overcome by placing StoryInit code into the PassageReady special passage instead.  This means that the project is reinitiated every time a new passage is run. 

Here are the reboot dynamics, taken from the SugarCube documentation, followed by a question/suggestion...
<blockquote>''Refreshing and Restarting''
<i>Whenever your story is first started or, for any reason, restarted—e.g., the browser window/tab was refreshed/reloaded—it undergoes its startup sequence. Several things occur each and every time startup happens, regardless of whether or not a playthrough session will be restored, an autosave loaded, or the starting passage run.

First, the CSS, JavaScript, and Widget sections are processed. Next, the StoryInit special passage is processed. Finally, one of three things happen (in order): the existing playthrough session is restored, if it exists, else the autosave is loaded, if it exists and is configured to do so, else the starting passage is run.

StoryInit code seems to have no effect because the startup state is replaced by that of the incoming state, but the initiation code is still executed by the engine.
 
When the story is restarted by SugarCube rather than refreshed via the browser, the playthrough session, if any, is not loaded. StoryInit is run, as always. If the autosave exists and the story is configured to automatically load it, then the autosave is loaded and the state is replaced by the autosave's state and the active passage is rendered, just as if the user had loaded any other save. If no autosave exists, then the starting passage is rendered.</i></blockquote>
Joeyrsp and Philip's (January 2022) understanding of the overall memory system is captured in this dialogue:

//''Philip:''// It seems to me the twine system is designed to assume that if a player closes a tab in a controlled way, the user has completed the session - so all the transient stuff (story and passage variables) are wiped as part of the browser shutting down the tab.

I guess what happens with sugarcube autosave is that the twine project triggers the browser to take all the transient stuff that would be captured by the playthrough system in a crash scenario and it is formally stored ready for the session to resume.  So the auto-save system is not a parallel system to the playthrough memory, it is an extra step to retain (prevent the clearing of) the info in the playthrough memory system that otherwise would be deliberately cleared out.

''//Joeyrsp://'' The browser has 3 places data can be:
1. there is the active process in memory that the whole of the tab is loaded in with all the html and javascript and the like 
2. there is the session storage which is a key/value store that is written to disk and persists through crashes but is cleared on intentional close 
3. there is the local storage which is a key/value store that is written to disk and persists indefinitely
* The living system that you interact with macros and twinescript lives in number 1
* The playthrough session data goes in number 2 ("session storage")
* Saves go in number 3
//''Philip:''// Can all programs survive system crashes these days?  ie. does the browser manage crash recovery or does the app/html file play a role?

''//Joeyrsp://'' There is no universal crash recovery system
the browser will persist the session and local storage (number 2 & 3) but the stuff in memory (number 1) is not recoverable

//''Philip:''// Here's what I think must happen integrating what you said with what I said earlier.

To avoid losing the data in storage system 1 (your definition) twine needs to instruct the twine project file to save data regularly and without much delay into sessional storage so that the loss of info in storage system 1 has nearly no consequence.

The twine project file would need to instruct the browser to NOT clear sessional data in the case of an un-graceful shutdown by the browser or the computer.  In the case of a crash the twine file can then go back to the sessional data.

But if there is a graceful shutdown then the twine file would, if the autosave is on, tell the browser to recategorise the data in the sessional store and 'put' it in a special category of persistent (but temporary) memory.  On the resumption of the session, the twine file would recategorise the session save data as normal session data and then resume where it left off.  In real life the data might or might not be copied to a new place on the disk or it might just have its labels changed so that it is treated differently.

But for practical purposes when autosave is on it is telling the browser to NOT delete session info when the tab/browser is shut down.

''//Joeyrsp://'' "Instruct the browser to NOT clear sessional data"  this is not a thing.  Wait hold on, which way are you using session here?

//''Philip:''// With auto save ''not''' on, then a session would last until tab closed or browser closed or instruction to restart given.  If autosave and reload is operating then the session is ongoing in active and inactive phases - until the user finally fully shuts the project down - they would need to turn off auto save or delete autosave on engine restart. 

''//Joeyrsp://''  So the pipeline is...
* you load the document into memory and it starts running.
* from here on twine (actually sugarcube) does everything:
** does the loading process you are familiar with, pulling things out of session and local storage (number 2 & 3) into memory (number 1).
** creates moments in memory (number 1) on passage transition.
** puts the history into session storage (number 2) under the 'playthrough session' when a new moment is created.
** puts the history into local storage (number 3) under the 'saves' when a new moment is created if autosave is on. 
//''Philip:''// Sounds reasonable!!  :)
I'm guessing that playthrough also captures pre-moment memory as well??

''//Joeyrsp://''  What do you mean by "premoment"?

//''Philip:''// That before a shift to a new passage or some coding equivalent (which I've seen exists according to the documentation) or random advice I've stumbled over.


